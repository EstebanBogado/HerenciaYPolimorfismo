package ar.edu.unlam.alumno.pb2.clases;

import java.util.Arrays;

public class Traslados {

	private String nombreSistema;
	private double costoKm;
	private double costoMinimoViaje;
	private Destino destinos[];
	private int viajesAcumulados = 0;
	private double costoViajesAcumulados = 0.0;
	private static final int CANTIDAD_DE_DESTINOS = 100;
	private static final int CANTIDAD_DE_VIAJES = 100;
	private Viaje viajes[];
	private int destinosAcumulados = 0;
	private double costoBrutoDelViaje;
	private double costoViajeConDescuento;

	/***
	 * El constructor toma los valores necesarios para generar un nuevo traslado
	 * 
	 * @param nombreSistema
	 * @param costoMinimoViaje
	 * @param costoKm
	 */
	public Traslados(String nombreSistema, double costoMinimoViaje, double costoKm) {
		this.nombreSistema = nombreSistema;
		this.costoMinimoViaje = costoMinimoViaje;
		this.costoKm = costoKm;
		this.destinos = new Destino[CANTIDAD_DE_DESTINOS];
		this.viajes = new Viaje[CANTIDAD_DE_VIAJES];

	}

	/***
	 * Agrega un destino al array de destinos
	 * 
	 * @param destinoViaje
	 * @return - true si el destino no existe o false si el destino ya existe
	 */
	public boolean agregarDestino(Destino destinoViaje) {
		if (existeDestino(destinoViaje.getCodigoDestino())) {
			return false;
		}
		for (int i = 0; i < CANTIDAD_DE_DESTINOS; i++) {
			if (this.destinos[i] == null) {
				this.destinos[i] = destinoViaje;
				destinosAcumulados++;
				return true;

			}
		}
		return false;
	}

	/***
	 * 
	 * @param codigoDestino
	 * @return = true
	 */
	public boolean existeDestino(int codigoDestino) {

		return this.buscarDestino(codigoDestino) != null;
	}

	/***
	 * 
	 * @param codigoDestino
	 * @return = objeto o null
	 */

	public Destino buscarDestino(int codigoDestino) {

		for (int i = 0; i < CANTIDAD_DE_DESTINOS; i++) {
			if (this.destinos[i] != null && this.destinos[i].getCodigoDestino() == codigoDestino) {
				return this.destinos[i];
			}
		}
		return null;
	}

	/***
	 * costro bruto = (precio mínimo + (distancia * costo km))
	 * 
	 * @param destino
	 * @return
	 */
	public void costoBrutoDelViaje(Destino destino) {

		this.costoBrutoDelViaje = this.costoMinimoViaje + (destino.getDistancia() * this.costoKm);

	}

	/***
	 * 
	 * @param viaje
	 */
	public boolean agregarViaje(Viaje viaje) {
		for (int i = 0; i < CANTIDAD_DE_VIAJES; i++) {
			if (viajes[i] == null) {
				this.viajes[i] = viaje;
				this.viajesAcumulados++;
				this.costoViajesAcumulados += viajes[i].getCostoViajeConDescuento();
				return true;
			}
		}
		return false;
	}

	/***
	 * 
	 * @param viaje
	 * @return
	 */
	public double importeTotalDeLosViajes(Viaje viaje) {
		return this.costoViajesAcumulados;

	}

	public double getCostoFinalViaje(Viaje viaje) {
		return viaje.getCostoViajeConDescuento();
	}

	public String getNombreSistema() {
		return nombreSistema;
	}

	/***
	 * ordena el arreglo de menor a mayo mediante burbujeo
	 */
	public void ordenarViajesAscendente() {
		for (int i = 0; i < CANTIDAD_DE_VIAJES; i++) {
			for (int j = 0; j < CANTIDAD_DE_VIAJES; j++) {
				if (viajes[j].getCostoViajeConDescuento() > viajes[j + 1].getCostoViajeConDescuento()) {
					Viaje temp = viajes[j + 1];
					viajes[j + 1] = viajes[j];
					viajes[j] = temp;
				}
			}
		}
	}

	/***
	 * determina el valor final del viaje luego de aplicar el porcentaje de
	 * descuento al costro bruto (precio mínimo + (distancia * costo km))
	 * 
	 * @param costoViaje
	 */
	public void CostoFinalViaje(Viaje viaje) {

		double descuento = this.costoBrutoDelViaje * viaje.getPorcentajeDeDescuento() / 100;

		this.costoViajeConDescuento = this.costoBrutoDelViaje - descuento;

	}
	
	public double getCostoViajeConDescuento() {
		return this.costoViajeConDescuento;
	}

	public double getCostoPromedioDeViajes() {
		return this.costoViajesAcumulados / this.viajesAcumulados;
	}

	public double getCostoBrutoDelViaje() {
		return this.costoBrutoDelViaje;
	}

	public double getCostoKm() {
		return this.costoKm;
	}

	public double getCostoMinimoViaje() {
		return this.costoMinimoViaje;
	}

	public Destino[] getDestinos() {
		return this.destinos;
	}

	public int getDestinosAcumulados() {
		return this.destinosAcumulados;
	}

	public int getViajesAcumulados() {
		return this.viajesAcumulados;
	}

	public double getCostoViajesAcumulados() {
		return this.costoViajesAcumulados; 
	}

	public static int getCantidadDeDestinos() {
		return CANTIDAD_DE_DESTINOS;
	}

	public static int getCantidadDeViajes() {
		return CANTIDAD_DE_VIAJES;
	}

	public Viaje[] getViajes() {
		return this.viajes;
	}

	@Override
	public String toString() {
		return "Traslados [nombreSistema=" + nombreSistema + ", costoKm=" + costoKm + ", costoMinimoViaje="
				+ costoMinimoViaje + ", destinos=" + Arrays.toString(destinos) + ", viajesAcumulados="
				+ viajesAcumulados + ", costoViajesAcumulados=" + costoViajesAcumulados + ", viajes="
				+ Arrays.toString(viajes) + "]";
	}

}
